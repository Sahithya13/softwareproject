{
    "problems": [
      {
        "number": 2423,
        "title": "Remove Letter To Equalize Frequency",
        "difficulty": "Easy",
        "description": "You are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal. Return true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.",
        "examples": [
          {
            "input": "word = \"abcc\"",
            "output": "true",
            "explanation": "Select index 3 and delete it: word becomes \"abc\" and each character has a frequency of 1."
          },
          {
            "input": "word = \"aazz\"",
            "output": "false",
            "explanation": "We must delete a character, so either the frequency of \"a\" is 1 and the frequency of \"z\" is 2, or vice versa. It is impossible to make all present letters have equal frequency."
          }
        ],
        "constraints": [
          "2 <= word.length <= 100",
          "word consists of lowercase English letters only."
        ],
        "function_signatures": {
          "python": "def equalFrequency(self, word: str) -> bool:",
          "java": "public boolean equalFrequency(String word) {",
          "cpp": "bool equalFrequency(string word) {"
        }
      },
      {
        "number": 2591,
        "title": "Distribute Money to Maximum Children", 
        "difficulty": "Easy",
        "description": "You are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to. You have to distribute the money according to the following rules: All money must be distributed, everyone must receive at least 1 dollar, nobody receives 4 dollars. Return the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. If there is no way to distribute the money, return -1.",
        "examples": [
          {
            "input": "money = 20, children = 3",
            "output": "1", 
            "explanation": "The maximum number of children with 8 dollars will be 1."
          },
          {
            "input": "money = 16, children = 2",
            "output": "2",
            "explanation": "Each child can be given 8 dollars."
          }
        ],
        "constraints": [
          "1 <= money <= 200",
          "2 <= children <= 30"
        ],
        "function_signatures": {
          "python": "def distMoney(self, money: int, children: int) -> int:",
          "java": "public int distMoney(int money, int children) {",
          "cpp": "int distMoney(int money, int children) {"
        }
      },
      {
        "number": 1909,
        "title": "Remove One Element to Make the Array Strictly Increasing",
        "difficulty": "Easy", 
        "description": "Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.",
        "examples": [
          {
            "input": "nums = [1,2,10,5,7]",
            "output": "true",
            "explanation": "By removing 10 at index 2 from nums, it becomes [1,2,5,7]."
          },
          {
            "input": "nums = [2,3,1,2]", 
            "output": "false",
            "explanation": "No resulting array is strictly increasing."
          }
        ],
        "constraints": [
          "2 <= nums.length <= 1000",
          "1 <= nums[i] <= 1000"
        ],
        "function_signatures": {
          "python": "def canBeIncreasing(self, nums: List[int]) -> bool:",
          "java": "public boolean canBeIncreasing(int[] nums) {",
          "cpp": "bool canBeIncreasing(vector<int>& nums) {"
        }
      },
      {
        "number": 2660,
        "title": "Determine the Winner of a Bowling Game",
        "difficulty": "Easy",
        "description": "You are given two 0-indexed integer arrays player1 and player2, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively. The bowling game consists of n turns, and the number of pins in each turn is exactly 10. Assume a player hits xi pins in the ith turn. The value of the ith turn for the player is: 2xi if the player hits 10 pins in either (i - 1)th or (i - 2)th turn, otherwise, it is xi. The score of the player is the sum of the values of their n turns. Return 1 if the score of player 1 is more than the score of player 2, 2 if the score of player 2 is more than the score of player 1, and 0 in case of a draw.",
        "examples": [
        {
         "input": "player1 = [5,10,3,2], player2 = [6,5,7,3]",
        "output": "1",
        "explanation": "The score of player 1 is 5 + 10 + 2*3 + 2*2 = 25. The score of player 2 is 6 + 5 + 7 + 3 = 21."
        },
    {
      "input": "player1 = [3,5,7,6], player2 = [8,10,10,2]",
      "output": "2",
      "explanation": "The score of player 1 is 3 + 5 + 7 + 6 = 21. The score of player 2 is 8 + 10 + 2*10 + 2*2 = 42."
    },
    {
      "input": "player1 = [2,3], player2 = [4,1]",
      "output": "0",
      "explanation": "The score of player1 is 2 + 3 = 5. The score of player2 is 4 + 1 = 5."
    },
    {
      "input": "player1 = [1,1,1,10,10,10,10], player2 = [10,10,10,10,1,1,1]",
      "output": "2",
      "explanation": "The score of player1 is 1 + 1 + 1 + 10 + 2*10 + 2*10 + 2*10 = 73. The score of player2 is 10 + 2*10 + 2*10 + 2*10 + 2*1 + 2*1 + 1 = 75."
    }
  ],
    "constraints": [
    "n == player1.length == player2.length",
    "1 <= n <= 1000",
    "0 <= player1[i], player2[i] <= 10"
  ],
    "function_signatures": {
    "python": "def isWinner(self, player1: List[int], player2: List[int]) -> int:",
    "java": "public int isWinner(int[] player1, int[] player2) {",
    "cpp": "int isWinner(vector<int>& player1, vector<int>& player2) {"
      }
      },
      {
        "number": 2047,
        "title": "Number of Valid Words in a Sentence",
        "difficulty": "Easy",
        "description": "A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '. A token is a valid word if all three of the following are true: It only contains lowercase letters, hyphens, and/or punctuation (no digits), there is at most one hyphen '-', and there is at most one punctuation mark at the end of the token.",
        "examples": [
          {
            "input": "sentence = \"cat and dog\"",
            "output": "3",
            "explanation": "The valid words in the sentence are \"cat\", \"and\", and \"dog\"."
          }
        ],
        "constraints": [
          "1 <= sentence.length <= 1000",
          "sentence contains only lowercase English letters, digits, spaces, hyphens, and punctuation marks"
        ],
        "function_signatures": {
          "python": "def countValidWords(self, sentence: str) -> int:",
          "java": "public int countValidWords(String sentence) {",
          "cpp": "int countValidWords(string sentence) {"
        }
      },
      {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": "Easy",
        "description": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.",
        "examples": [
    {   
        "input": "nums = [3,2,1]",
        "output": "1",
        "explanation": "The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1."
    },
    {
      "input": "nums = [1,2]",
      "output": "2",
      "explanation": "The first distinct maximum is 2. The second distinct maximum is 1. The third distinct maximum does not exist, so the maximum (2) is returned instead."
    },
    {
      "input": "nums = [2,2,3,1]",
      "output": "1",
      "explanation": "The first distinct maximum is 3. The second distinct maximum is 2 (both 2's are counted together since they have the same value). The third distinct maximum is 1."
    }
  ],
    "constraints": [
    "1 <= nums.length <= 10^4",
    "-2^31 <= nums[i] <= 2^31 - 1"
  ],
    "function_signatures": {
    "python": "def thirdMax(self, nums: List[int]) -> int:",
    "java": "public int thirdMax(int[] nums) {",
    "cpp": "int thirdMax(vector<int>& nums) {"
        }
      },
      {
        "number": 2760,
        "title": "Longest Even Odd Subarray With Threshold",
        "difficulty": "Easy",
        "description": "You are given a 0-indexed integer array nums and an integer threshold. Find the length of the longest subarray of nums starting at index l and ending at index r that satisfies: nums[l] % 2 == 0, for all indices i in [l, r-1], nums[i] % 2 != nums[i+1] % 2, and for all indices i in [l, r], nums[i] <= threshold.",
        "examples": [
          {
            "input": "nums = [3,2,5,4], threshold = 5",
            "output": "3",
            "explanation": "In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]"
          }
        ],
        "constraints": [
          "1 <= nums.length <= 100",
          "1 <= nums[i] <= 100",
          "1 <= threshold <= 100"
        ],
        "function_signatures": {
          "python": "def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:",
          "java": "public int longestAlternatingSubarray(int[] nums, int threshold) {",
          "cpp": "int longestAlternatingSubarray(vector<int>& nums, int threshold) {"
        }
      },
      {
        "number": 925,
        "title": "Long Pressed Name",
        "difficulty": "Easy",
        "description": "Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times. You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.",
        "examples": [
          {
            "input": "name = \"alex\", typed = \"aaleex\"",
            "output": "true",
            "explanation": "'a' and 'e' in 'alex' were long pressed."
          }
        ],
        "constraints": [
          "1 <= name.length, typed.length <= 1000",
          "name and typed consist of only lowercase English letters"
        ],
        "function_signatures": {
          "python": "def isLongPressedName(self, name: str, typed: str) -> bool:",
          "java": "public boolean isLongPressedName(String name, String typed) {",
          "cpp": "bool isLongPressedName(string name, string typed) {"
        }
      },
      {
        "number": 2996,
        "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum",
        "difficulty": "Easy",
        "description": "You are given a 0-indexed array of integers nums. A prefix nums[0..i] is sequential if, for all 1 <= j <= i, nums[j] = nums[j-1] + 1. In particular, the prefix consisting only of nums[0] is sequential. Return the smallest integer x missing from nums such that x is greater than or equal to the sum of the longest sequential prefix.",
        "examples": [
          {
            "input": "nums = [1,2,3,2,5]",
            "output": "6",
            "explanation": "The longest sequential prefix is [1,2,3] with a sum of 6"
          }
        ],
        "constraints": [
          "1 <= nums.length <= 50",
          "1 <= nums[i] <= 50"
        ],
        "function_signatures": {
          "python": "def missingInteger(self, nums: List[int]) -> int:",
          "java": "public int missingInteger(int[] nums) {",
          "cpp": "int missingInteger(vector<int>& nums) {"
        }
      },
      {
        "number": 859,
        "title": "Buddy Strings",
        "difficulty": "Easy",
        "description": "Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false. Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].",
        "examples": [
          {
            "input": "s = \"ab\", goal = \"ba\"",
            "output": "true",
            "explanation": "You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal."
          }
        ],
        "constraints": [
          "1 <= s.length, goal.length <= 2 * 10^4",
          "s and goal consist of lowercase letters"
        ],
        "function_signatures": {
          "python": "def buddyStrings(self, s: str, goal: str) -> bool:",
          "java": "public boolean buddyStrings(String s, String goal) {",
          "cpp": "bool buddyStrings(string s, string goal) {"
        }
      }
    ]
}