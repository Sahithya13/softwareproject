{
    "problems": [
        {
        "number": 3362,
        "title": "Zero Array Transformation III",
        "difficulty": "Medium",
        "description": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri]. Each queries[i] represents the following action on nums: Decrement the value at each index in the range [li, ri] in nums by at most 1. The amount by which the value is decremented can be chosen independently for each index. A Zero Array is an array with all its elements equal to 0. Return the maximum number of elements that can be removed from queries, such that nums can still be converted to a zero array using the remaining queries. If it is not possible to convert nums to a zero array, return -1.",
        "examples": [
          {
            "input": "nums = [2,0,2], queries = [[0,2],[0,2],[1,1]]",
            "output": "1",
            "explanation": "After removing queries[2], nums can still be converted to a zero array. Using queries[0], decrement nums[0] and nums[2] by 1 and nums[1] by 0. Using queries[1], decrement nums[0] and nums[2] by 1 and nums[1] by 0."
          },
          {
            "input": "nums = [1,1,1,1], queries = [[1,3],[0,2],[1,3],[1,2]]",
            "output": "2",
            "explanation": "We can remove queries[2] and queries[3]."
          },
          {
            "input": "nums = [1,2,3,4], queries = [[0,3]]",
            "output": "-1",
            "explanation": "nums cannot be converted to a zero array even after using all the queries."
          }
        ],
        "constraints": [
          "1 <= nums.length <= 10^5",
          "0 <= nums[i] <= 10^5",
          "1 <= queries.length <= 10^5",
          "queries[i].length == 2",
          "0 <= li <= ri < nums.length"
        ],
        "function_signatures": {
          "python": "def maxRemoval(self, nums: List[int], queries: List[List[int]]) -> int:",
          "java": "public int maxRemoval(int[] nums, int[][] queries)",
          "cpp": "int maxRemoval(vector<int>& nums, vector<vector<int>>& queries)"
        }
      },
      {
        "number": 3234,
        "title": "Count the Number of Substrings With Dominant Ones",
        "difficulty": "Medium",
        "description": "You are given a binary string s. Return the number of substrings with dominant ones. A string has dominant ones if the number of ones in the string is greater than or equal to the square of the number of zeros in the string.",
        "examples": [
          {
            "input": "s = \"00011\"",
            "output": "5",
            "explanation": "The substrings with dominant ones are \"1\" (twice), \"01\", \"11\", and \"011\". For example, \"011\" has two zeros and two ones, and 2 â‰¥ 2^2."
          },
          {
            "input": "s = \"101101\"",
            "output": "16",
            "explanation": "There are 21 substrings total and 5 of them have non-dominant ones, so 16 substrings have dominant ones."
          }
        ],
        "constraints": [
          "1 <= s.length <= 4 * 10^4",
          "s consists only of characters '0' and '1'"
        ],
        "function_signatures": {
          "python": "def numberOfSubstrings(self, s: str) -> int:",
          "java": "public int numberOfSubstrings(String s)",
          "cpp": "int numberOfSubstrings(string s)"
        }
      },
      {
        "number": 3346,
        "title": "Maximum Frequency of an Element After Performing Operations I",
        "difficulty": "Medium",
        "description": "You are given an integer array nums and two integers k and numOperations. You must perform an operation numOperations times on nums, where in each operation you: Select an index i that was not selected in any previous operations and add an integer in the range [-k, k] to nums[i]. Return the maximum possible frequency of any element in nums after performing the operations.",
        "examples": [
          {
            "input": "nums = [1,4,5], k = 1, numOperations = 2",
            "output": "2",
            "explanation": "We can achieve a maximum frequency of two by: Adding 0 to nums[1]. nums becomes [1,4,5]. Adding -1 to nums[2]. nums becomes [1,4,4]."
          },
          {
            "input": "nums = [5,11,20,20], k = 5, numOperations = 1",
            "output": "2",
            "explanation": "We can achieve a maximum frequency of two by: Adding 0 to nums[1]."
          }
        ],
        "constraints": [
          "1 <= nums.length <= 10^5",
          "1 <= nums[i] <= 10^5",
          "0 <= k <= 10^5",
          "0 <= numOperations <= nums.length"
        ],
        "function_signatures": {
          "python": "def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:",
          "java": "public int maxFrequency(int[] nums, int k, int numOperations)",
          "cpp": "int maxFrequency(vector<int>& nums, int k, int numOperations)"
        }
      },
      {
        "number": 3291,
        "title": "Minimum Number of Valid Strings to Form Target I",
        "difficulty": "Medium",
        "description": "You are given an array of strings words and a string target. A string x is called valid if x is a prefix of any string in words. Return the minimum number of valid strings that can be concatenated to form target. If it is not possible to form target, return -1.",
        "examples": [
          {
            "input": "words = [\"abc\",\"aaaaa\",\"bcdef\"], target = \"aabcdabc\"",
            "output": "3",
            "explanation": "The target string can be formed by concatenating: Prefix of length 2 of words[1], i.e. \"aa\". Prefix of length 3 of words[2], i.e. \"bcd\". Prefix of length 3 of words[0], i.e. \"abc\"."
          },
          {
            "input": "words = [\"abababab\",\"ab\"], target = \"ababaababa\"",
            "output": "2",
            "explanation": "The target string can be formed by concatenating: Prefix of length 5 of words[0], i.e. \"ababa\". Prefix of length 5 of words[0], i.e. \"ababa\"."
          },
          {
            "input": "words = [\"abcdef\"], target = \"xyz\"",
            "output": "-1",
            "explanation": "It's impossible to form the target string using prefixes of words."
          }
        ],
        "constraints": [
          "1 <= words.length <= 100",
          "1 <= words[i].length <= 5 * 10^3",
          "The input is generated such that sum(words[i].length) <= 10^5",
          "words[i] consists only of lowercase English letters",
          "1 <= target.length <= 5 * 10^3",
          "target consists only of lowercase English letters"
        ],
        "function_signatures": {
          "python": "def minValidStrings(self, words: List[str], target: str) -> int:",
          "java": "public int minValidStrings(String[] words, String target)",
          "cpp": "int minValidStrings(vector<string>& words, string target)"
        }
      },
      {
        "number": 3302,
        "title": "Find the Lexicographically Smallest Valid Sequence",
        "difficulty": "Medium",
        "description": "You are given two strings word1 and word2. A string x is called almost equal to y if you can change at most one character in x to make it identical to y. A sequence of indices seq is called valid if: The indices are sorted in ascending order, and concatenating the characters at these indices in word1 in the same order results in a string that is almost equal to word2. Return an array of size word2.length representing the lexicographically smallest valid sequence of indices. If no such sequence of indices exists, return an empty array.",
        "examples": [
          {
            "input": "word1 = \"vbcca\", word2 = \"abc\"",
            "output": "[0,1,2]",
            "explanation": "The lexicographically smallest valid sequence of indices is [0, 1, 2]: Change word1[0] to 'a'. word1[1] is already 'b'. word1[2] is already 'c'."
          },
          {
            "input": "word1 = \"bacdc\", word2 = \"abc\"",
            "output": "[1,2,4]",
            "explanation": "The lexicographically smallest valid sequence of indices is [1, 2, 4]: word1[1] is already 'a'. Change word1[2] to 'b'. word1[4] is already 'c'."
          },
          {
            "input": "word1 = \"aaaaaa\", word2 = \"aaabc\"",
            "output": "[]",
            "explanation": "There is no valid sequence of indices."
          }
        ],
        "constraints": [
          "1 <= word2.length < word1.length <= 3 * 10^5",
          "word1 and word2 consist only of lowercase English letters"
        ],
        "function_signatures": {
          "python": "def validSequence(self, word1: str, word2: str) -> List[int]:",
          "java": "public int[] validSequence(String word1, String word2)",
          "cpp": "vector<int> validSequence(string word1, string word2)"
        }
      },
      {
        "number": 3026,
        "title": "Maximum Good Subarray Sum",
        "difficulty": "Medium",
        "description": "You are given an array nums of length n and a positive integer k. A subarray of nums is called good if the absolute difference between its first and last element is exactly k, in other words, the subarray nums[i..j] is good if |nums[i] - nums[j]| == k. Return the maximum sum of a good subarray of nums. If there are no good subarrays, return 0.",
        "examples": [
          {
            "input": "nums = [1,2,3,4,5,6], k = 1",
            "output": "11",
            "explanation": "The absolute difference between the first and last element must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6]."
          },
          {
            "input": "nums = [-1,3,2,4,5], k = 3",
            "output": "11",
            "explanation": "The absolute difference between the first and last element must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5]."
          },
          {
            "input": "nums = [-1,-2,-3,-4], k = 2",
            "output": "-6",
            "explanation": "The absolute difference between the first and last element must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3]."
          }
        ],
        "constraints": [
          "2 <= nums.length <= 10^5",
          "-10^9 <= nums[i] <= 10^9",
          "1 <= k <= 10^9"
        ],
        "function_signatures": {
          "python": "def maximumSubarraySum(self, nums: List[int], k: int) -> int:",
          "java": "public long maximumSubarraySum(int[] nums, int k)",
          "cpp": "long long maximumSubarraySum(vector<int>& nums, int k)"
        }
      },
      {
        "number": 3306,
        "title": "Count of Substrings Containing Every Vowel and K Consonants II",
        "difficulty": "Medium",
        "description": "You are given a string word and a non-negative integer k. Return the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.",
        "examples": [
          {
            "input": "word = \"aeioqq\", k = 1",
            "output": "0",
            "explanation": "There is no substring with every vowel."
          },
          {
            "input": "word = \"aeiou\", k = 0",
            "output": "1",
            "explanation": "The only substring with every vowel and zero consonants is word[0..4], which is \"aeiou\"."
          },
          {
            "input": "word = \"ieaouqqieaouqq\", k = 1",
            "output": "3",
            "explanation": "The substrings with every vowel and one consonant are: word[0..5], which is \"ieaouq\", word[6..11], which is \"qieaou\", and word[7..12], which is \"ieaouq\"."
          }
        ],
        "constraints": [
          "5 <= word.length <= 2 * 10^5",
          "word consists only of lowercase English letters",
          "0 <= k <= word.length - 5"
        ],
        "function_signatures": {
          "python": "def countOfSubstrings(self, word: str, k: int) -> int:",
          "java": "public long countOfSubstrings(String word, int k)",
          "cpp": "long long countOfSubstrings(string word, int k)"
        }
      },
      {
        "number": 2967,
        "title": "Minimum Cost to Make Array Equalindromic",
        "difficulty": "Medium",
        "description": "You are given a 0-indexed integer array nums having length n. You are allowed to perform a special move any number of times (including zero) on nums. In one special move you perform the following steps in order: Choose an index i in the range [0, n - 1], and a positive integer x. Add |nums[i] - x| to the total cost. Change the value of nums[i] to x. A palindromic number is a positive integer that remains the same when its digits are reversed. An array is considered equalindromic if all the elements in the array are equal to an integer y, where y is a palindromic number less than 10^9. Return an integer denoting the minimum possible total cost to make nums equalindromic by performing any number of special moves.",
        "examples": [
          {
            "input": "nums = [1,2,3,4,5]",
            "output": "6",
            "explanation": "We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6. It can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost."
          },
          {
            "input": "nums = [10,12,13,14,15]",
            "output": "11",
            "explanation": "We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11. It can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost."
          },
          {
            "input": "nums = [22,33,22,33,22]",
            "output": "22",
            "explanation": "We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22. It can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost."
          }
        ],
        "constraints": [
          "1 <= n <= 10^5",
          "1 <= nums[i] <= 10^9"
        ],
        "function_signatures": {
          "python": "def minimumCost(self, nums: List[int]) -> int:",
          "java": "public long minimumCost(int[] nums)",
          "cpp": "long long minimumCost(vector<int>& nums)"
        }
      }
      
      
    ]
  }